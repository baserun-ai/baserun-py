syntax = "proto3";

package baserun.v1;

import "google/protobuf/timestamp.proto";

message Status {
    string message = 1;

    enum StatusCode {
        STATUS_CODE_UNSPECIFIED = 0;
        STATUS_CODE_OK = 1;
        STATUS_CODE_ERROR = 2;
    }

    StatusCode code = 2;
}

message ToolFunction {
    string name = 1;
    string arguments = 2;
}

message ToolCall {
    string id = 1;
    string type = 2;
    ToolFunction function = 3;
}

message Message {
    string role = 1;
    string content = 2;
    string finish_reason = 3;
    string function_call = 4;
    repeated ToolCall tool_calls = 5;
    string tool_call_id = 6;
    string name = 7;
    string system_fingerprint = 8;
}

message Run {
    string run_id = 1;
    string suite_id = 2;
    string name = 3;
    repeated string inputs = 4;
    RunType run_type = 5;
    string metadata = 6; // JSONified map<string, any>
    google.protobuf.Timestamp start_timestamp = 7;
    google.protobuf.Timestamp completion_timestamp = 8;
    string result = 9;
    string error = 10;
    string session_id = 11;

    enum RunType {
        RUN_TYPE_TEST = 0;
        RUN_TYPE_PRODUCTION = 1;
    }
}

message Log {
    string run_id = 1;
    string name = 2;
    string payload = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message EndUser {
    string id = 1;
    string identifier = 2;
}

message Model {
    int32 id = 1;

    string model_name = 2;
    string provider = 3;
    string name = 4;
}

message ModelConfig {
    int32 id = 1;
    int32 model_id = 2;
    Model model = 3;

    string logit_bias = 4;
    float presence_penalty = 5;
    float frequency_penalty = 6;
    float temperature = 7;
    float top_p = 8;
    float top_k = 9;
    string functions = 10;
    string function_call = 11;
}

message Span {
    string run_id = 1;
    bytes trace_id = 2;
    uint64 span_id = 3;
    string name = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    Status status = 7;

    // Common Attributes
    string vendor = 8;
    string request_type = 9;
    string model = 10;
    int32 total_tokens = 11;
    int32 completion_tokens = 12;
    int32 prompt_tokens = 13;

    repeated Message prompt_messages = 14;
    repeated Message completions = 15;

    // OpenAI-specific attributes
    optional string api_base = 16;
    optional string api_type = 17;
    optional string functions = 18; // JSONified array<map<str, any>>
    optional string function_call = 19; // Request attribute: response function_call is in each Message
    optional double temperature = 20;
    optional double top_p = 21;
    optional int32 n = 22;
    optional bool stream = 23;
    repeated string stop = 24;
    optional int32 max_tokens = 25;
    optional double presence_penalty = 26;
    optional double frequency_penalty = 27;
    optional string logit_bias = 28; // JSONified map<str, int>
    optional string user = 29;
    optional int32 logprobs = 30;
    optional bool echo = 31;
    optional string suffix = 32;
    optional int32 best_of = 33;


    // Anthropic-specific attributes
    optional string log_id = 34;
    optional double top_k = 35;

    EndUser end_user = 36;
    optional string template_id = 37; // Deprecated, use template_version_id
    optional string template_parameters = 38; // JSONified map<str, any>
    optional string template_string = 45; // Deprecated, register_template is required to be done first
    optional string template_version_id = 46;

    optional string tools = 39; // JSONified array<map<str, any>>
    optional string tool_choice = 40; // JSONified map<str, any>
    optional int32 seed = 41;
    optional string response_format = 42;// JSONified map<str, any>

    optional string error_stacktrace = 43;
    optional string completion_id = 44;
}

message Eval {
    string name = 1;
    string type = 2;
    string result = 3;
    optional double score = 5;
    string submission = 6;
    string payload = 7; // JSONified map<string, any>
}

message Check {
    string name = 1;
    string methodology = 2;
    string expected = 3;  // JSONified map<string, any>
    string actual = 4; // JSONified map<string, any>
    double score = 5;
    string metadata = 6; // JSONified map<string, any>
}

message Feedback {
    string name = 1;
    double score = 2;
    string metadata = 3; // JSONified map<string, any>
    EndUser end_user = 4;
}

message CompletionAnnotations {
    string completion_id = 1;
    repeated Check checks = 2;
    repeated Log logs = 3;
    repeated Feedback feedback = 4;
}

message TestSuite {
    string id = 1;
    string name = 2;
    google.protobuf.Timestamp start_timestamp = 3;
    google.protobuf.Timestamp completion_timestamp = 4;
}

message Template {
    string id = 1;
    string name = 2;

    enum TemplateType {
        TEMPLATE_TYPE_UNSPECIFIED = 0;
        TEMPLATE_TYPE_FORMATTED_STRING = 1;
        TEMPLATE_TYPE_JINJA2 = 2;
    }

    TemplateType template_type = 3;
    repeated TemplateVersion template_versions = 4;
    optional TemplateVersion active_version = 5;
}

message TemplateVersion {
    string id = 1;
    Template template = 2;
    string tag = 3;
    string parameter_definition = 4;
    string template_string = 5;
}

message Session {
    string id = 1;
    string identifier = 2;

    google.protobuf.Timestamp start_timestamp = 3;
    google.protobuf.Timestamp completion_timestamp = 4;

    EndUser end_user = 5;
}

message StartRunRequest {
    Run run = 1;
}

message StartRunResponse {
    string message = 1;
}

message SubmitLogRequest {
    Log log = 1;
    Run run = 2;
}

message SubmitLogResponse {
    string message = 1;
}

message SubmitSpanRequest {
    Span span = 1;
    Run run = 2;
}

message SubmitSpanResponse {
    string message = 1;
}

message EndRunRequest {
    Run run = 1;
}

message EndRunResponse {
    string message = 1;
}

message SubmitEvalRequest {
    Eval eval = 1;
    Run run = 2;
}

message SubmitEvalResponse {
    string message = 1;
}

message StartTestSuiteRequest {
    TestSuite test_suite = 1;
}

message StartTestSuiteResponse {
    string message = 1;
}

message EndTestSuiteRequest {
    TestSuite test_suite = 1;
}

message EndTestSuiteResponse {
    string message = 1;
}

message StartSessionRequest {
    Session session = 1;
    Run run = 2;
}

message StartSessionResponse {
    string message = 1;
    Session session = 2;
}

message EndSessionRequest {
    Session session = 1;
}

message EndSessionResponse {
    string message = 1;
    Session session = 2;
}

message SubmitTemplateVersionRequest {
    TemplateVersion template_version = 1;
}

message SubmitTemplateVersionResponse {
    string message = 1;
    TemplateVersion template_version = 2;
}

message SubmitModelConfigRequest {
    ModelConfig model_config = 1;
}

message SubmitModelConfigResponse {
    string message = 1;
    ModelConfig model_config = 2;
}

message SubmitUserRequest {
    EndUser user = 1;
}

message SubmitUserResponse {
    string message = 1;
    EndUser user = 2;
}

message GetTemplatesRequest {
}

message GetTemplatesResponse {
    repeated Template templates = 1;
}

message SubmitAnnotationsRequest {
    CompletionAnnotations annotations = 1;
    Run run = 2;
}

message SubmitAnnotationsResponse {
    string message = 1;
}

service SubmissionService {
    rpc StartRun (StartRunRequest) returns (StartRunResponse);
    rpc SubmitLog (SubmitLogRequest) returns (SubmitLogResponse);
    rpc SubmitSpan (SubmitSpanRequest) returns (SubmitSpanResponse);
    rpc EndRun (EndRunRequest) returns (EndRunResponse);
    rpc SubmitEval (SubmitEvalRequest) returns (SubmitEvalResponse);
    rpc StartTestSuite (StartTestSuiteRequest) returns (StartTestSuiteResponse);
    rpc EndTestSuite (EndTestSuiteRequest) returns (EndTestSuiteResponse);
    rpc StartSession (StartSessionRequest) returns (StartSessionResponse);
    rpc EndSession (EndSessionRequest) returns (EndSessionResponse);
    rpc SubmitTemplateVersion (SubmitTemplateVersionRequest) returns (SubmitTemplateVersionResponse);
    rpc SubmitModelConfig (SubmitModelConfigRequest) returns (SubmitModelConfigResponse);
    rpc SubmitUser (SubmitUserRequest) returns (SubmitUserResponse);
    rpc GetTemplates (GetTemplatesRequest) returns (GetTemplatesResponse);
    rpc SubmitAnnotations (SubmitAnnotationsRequest) returns (SubmitAnnotationsResponse);
}