syntax = "proto3";

package baserun.v1;

import "google/protobuf/timestamp.proto";

message Status {
    string message = 1;

    enum StatusCode {
        STATUS_CODE_UNSPECIFIED = 0;
        STATUS_CODE_OK = 1;
        STATUS_CODE_ERROR = 2;
    }

    StatusCode code = 2;
}

message Message {
    string role = 1;
    string content = 2;
    string finish_reason = 3;
}

message Run {
    string run_id = 1;
    RunType run_type = 2;
    // JSONified map<string, any>
    string metadata = 3;

    enum RunType {
        RUN_TYPE_TEST = 0;
        RUN_TYPE_PRODUCTION = 1;
    }
}

message Log {
    string run_id = 1;
    string name = 2;
    string payload = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message Span {
    string run_id = 1;
    bytes trace_id = 2;
    uint64 span_id = 3;
    string name = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    Status status = 7;

    // Attributes
    string vendor = 8;
    string request_type = 9;
    string model = 10;
    float temperature = 11;
    float top_p = 12;
    float frequency_penalty = 13;
    float presence_penalty = 14;
    int32 total_tokens = 15;
    int32 completion_tokens = 16;
    int32 prompt_tokens = 17;

    repeated Message prompt_messages = 18;
    repeated Message completions = 19;

    // OpenAI
    string api_base = 20;
    string api_type = 21;

    // Anthropic
    string log_id = 22;
}

message Eval {
    string name = 1;
    string type = 2;
    string result = 3;
    float score = 4;
    string submission = 5;
    // JSONified map<string, any>
    string payload = 6;
}

message StartRunRequest {
    Run run = 1;
}

message StartRunResponse {
    string message = 1;
}

message SubmitLogRequest {
    Log log = 1;
}

message SubmitLogResponse {
    string message = 1;
}

message SubmitSpanRequest {
    Span span = 1;
}

message SubmitSpanResponse {
    string message = 1;
}

message EndRunRequest {
    string run_id = 1;
}

message EndRunResponse {
    string message = 1;
}

message SubmitEvalRequest {
    Eval eval = 1;
}
message SubmitEvalResponse {
    string message = 1;
}

service SubmissionService {
    rpc StartRun (StartRunRequest) returns (StartRunResponse);
    rpc SubmitLog (SubmitLogRequest) returns (SubmitLogResponse);
    rpc SubmitSpan (SubmitSpanRequest) returns (SubmitSpanResponse);
    rpc EndRun (EndRunRequest) returns (EndRunResponse);
    rpc SubmitEval (SubmitEvalRequest) returns (SubmitEvalResponse);
}