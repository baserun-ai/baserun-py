import base64
from typing import Any, Dict, List, Sequence

import google.generativeai as genai
import pytest
from google.ai.generativelanguage_v1 import Candidate
from google.generativeai.types.generation_types import BaseGenerateContentResponse, GenerationConfig

from baserun import Baserun
from baserun.helpers import BaserunProvider
from baserun.v1.baserun_pb2 import Message, Span
from tests.conftest import get_mock_objects


# asserts in mock_services makes it so that we need a trace
@Baserun.trace
def gemini(
    prompt: Any,
    model_name: str = "gemini-pro",
    model_kwargs: Dict[str, Any] = None,
    generate_content_kwargs: Dict[str, Any] = None,
):
    if model_kwargs is None:
        model_kwargs = {}
    if generate_content_kwargs is None:
        generate_content_kwargs = {}
    model = genai.GenerativeModel(model_name, **model_kwargs)
    return model.generate_content(prompt, **generate_content_kwargs)


@Baserun.trace
def gemini_async(
    prompt: Any,
    model_name: str = "gemini-pro",
    model_kwargs: Dict[str, Any] = None,
    generate_content_kwargs: Dict[str, Any] = None,
):
    if model_kwargs is None:
        model_kwargs = {}
    if generate_content_kwargs is None:
        generate_content_kwargs = {}
    model = genai.GenerativeModel(model_name, **model_kwargs)
    return model.generate_content_async(prompt, **generate_content_kwargs)


@Baserun.trace
def gemini_chat(msgs: List[str]):
    model = genai.GenerativeModel("gemini-pro")
    chat = model.start_chat()
    responses = []
    for msg in msgs:
        responses.append(chat.send_message(msg))
    return responses


def assert_completions_match_response(completions: Sequence[Message], response: BaseGenerateContentResponse):
    assert len(response.candidates) == len(completions)
    for candidate, completion in zip(response.candidates, completions):
        candidate: Candidate
        completion: Message
        assert completion.role == candidate.content.role
        assert completion.finish_reason == candidate.finish_reason.name
        for part in candidate.content.parts:
            assert part.text in completion.content


def test_gemini_basic(mock_services):
    response = gemini("tell me a story")

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro"
    assert span.stream is False
    assert span.request_type == "chat"
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "tell me a story"
    assert_completions_match_response(span.completions, response)


def test_gemini_with_config(mock_services):
    generation_config = GenerationConfig(
        stop_sequences=["asdf"], max_output_tokens=123, temperature=0.7, top_p=0.1, top_k=20
    )
    response = gemini("tell me a story", model_kwargs={"generation_config": generation_config})

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro"
    assert span.stream is False
    assert span.request_type == "chat"
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "tell me a story"
    assert_completions_match_response(span.completions, response)
    assert span.stop == generation_config.stop_sequences
    assert span.max_tokens == generation_config.max_output_tokens
    # there's some juggling with floating point types going on, so we're using approx
    assert span.temperature == pytest.approx(generation_config.temperature)
    assert span.top_p == pytest.approx(generation_config.top_p)
    assert span.top_k == generation_config.top_k


def test_gemini_multimodal(mock_services):
    image_part = {
        "mime_type": "image/png",
        "data": base64.b64decode(
            ""
        ),
    }

    response = gemini(["what does this picture depict?", image_part], model_name="gemini-pro-vision")

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro-vision"
    assert span.stream is False
    assert span.request_type == "chat"
    # only text parts should be included
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "what does this picture depict?"
    assert_completions_match_response(span.completions, response)


def test_gemini_stream(mock_services):
    response = gemini("tell me a story", generate_content_kwargs={"stream": True})
    # collect whole response
    for _ in response:
        ...

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro"
    assert span.stream is True
    assert span.request_type == "chat"
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "tell me a story"
    assert_completions_match_response(span.completions, response)


def test_gemini_chat(mock_services):
    user_prompts = ["hello", "how are you?", "bye"]
    responses: List[BaseGenerateContentResponse] = gemini_chat(user_prompts)

    span0: Span = Baserun.exporter_queue.queue[0].span
    span1: Span = Baserun.exporter_queue.queue[1].span
    span2: Span = Baserun.exporter_queue.queue[2].span

    assert_completions_match_response(span0.completions, responses[0])
    assert_completions_match_response(span1.completions, responses[1])
    assert_completions_match_response(span2.completions, responses[2])

    prompts = [user_prompts[0], responses[0].text, user_prompts[1], responses[1].text, user_prompts[2]]

    assert len(span0.prompt_messages) == 1
    assert [x.content for x in span0.prompt_messages] == prompts[:1]
    assert len(span1.prompt_messages) == 3
    assert [x.content for x in span1.prompt_messages] == prompts[:3]
    assert len(span2.prompt_messages) == 5
    assert [x.content for x in span2.prompt_messages] == prompts[:5]


@pytest.mark.asyncio
async def test_gemini_async(mock_services):
    response = await gemini_async("tell me a story")

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro"
    assert span.stream is False
    assert span.request_type == "chat"
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "tell me a story"
    assert_completions_match_response(span.completions, response)


@pytest.mark.asyncio
async def test_gemini_async_stream(mock_services):
    response = await gemini_async("tell me a story", generate_content_kwargs={"stream": True})
    # collect whole response
    async for _ in response:
        ...

    started_run, span, submitted_run, ended_run = get_mock_objects(mock_services)

    assert span.vendor == BaserunProvider.GOOGLE
    assert span.model == "models/gemini-pro"
    assert span.stream is True
    assert span.request_type == "chat"
    assert len(span.prompt_messages) == 1
    assert span.prompt_messages[0].content == "tell me a story"
    assert_completions_match_response(span.completions, response)
